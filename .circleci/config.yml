# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  clang_format_lint:
    description: "Perform clang-format linting"
#    name: Format c/cuda codes with clang-format
    parameters:
      source:
        type: string
      extensions:
        type: string
      style:
        type: string
        default: "file"
    steps:
      - run: echo "TODO"

  checkout_full:
    description: "Checkout the whole package of MMDeploy"
    steps:
      - checkout
      - run:
          name: Checkout submodule
          command: |
            echo ">> the workspace of circleci is : $(pwd)"
            cd mmdeploy
            git submodule sync
            git submodule update --init

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  lint:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/python:3.7.4
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Install pre-commit hook
          command: |
            sudo apt-add-repository ppa:brightbox/ruby-ng -y
            sudo apt-get update
            sudo apt-get install -y ruby2.7
            pip install pre-commit
            pre-commit install
      - run:
          name: Linting
          command: pre-commit run --all-files
      - clang_format_lint:
          source: csrc
          extensions: h,c,cpp,hpp,cu,cuh
          style: file
      - run:
          name: Check docstring coverage
          command: |
            pip install interrogate
            interrogate -v --ignore-init-method --ignore-module --ignore-nested-functions --ignore-regex "__repr__" --fail-under 80 mmdeploy

  # build mmdeploy using its CPU Dockerfile
  build_cpu:
    parameters:
      cache_key:
        type: string
    machine:
      image: ubuntu-2004:202111-02
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout_full
      - run:
          name: Build mmdeploy-cpu docker image
          command: |
            echo ">> mmdeploy path: $(pwd)"
            docker build docker/CPU/ -t mmdeploy:cpu
  
  setup_environment:
    parameters:
      python:
        type: string
        default: "3.7.4"
      torch:
        type: string
      torchvision:
        type: string
      mmcv:
        type: string
        default: "1.4.0"
    machine:
      image: ubuntu-2004:202111-02
    resource_class: large
    steps:
      - restore_cache:
          key: v1-<< parameters.python >>-<< parameters.torch >>-<< parameters.torchvision>>-<<parameters.mmcv>>
      - run:
          name: Install python via Conda
          command: |
            echo 'the current path: ' $(pwd)
            ls $(pwd)
            if [ ! -d conda ]; then
              echo 'Conda does not exist. Install it'
              curl -fsSL -v -o miniconda.sh -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
              bash miniconda.sh -b -p conda
              rm miniconda.sh
              conda/bin/conda install -y python=<< parameters.python >> cython
              conda/bin/conda clean -ya
            else
              echo 'conda exists'
            fi
      - run:
          name: Install Pytorch
          command: |
            conda/bin/pip install torch==<< parameters.torch >>+cpu torchvision==<< parameters.torchvision >>+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - run:
          name: Install mmcv-full
          command: |
            conda/bin/pip install mmcv-full==<< parameters.mmcv >> -f https://download.openmmlab.com/mmcv/dist/cpu/torch<< parameters.torch >>/index.html
      - save_cache:
          paths:
            - conda
          key: v1-<< parameters.python >>-<< parameters.torch >>-<< parameters.torchvision>>-<<parameters.mmcv>>
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  pr_stage_test:
    jobs:
      - setup_environment:
          python: 3.7.4
          torch: 1.8.0
          torchvision: 0.9.0
          mmcv: 1.4.0
      # - build_cpu:
      #     cache_key: v1-3.7.4-1.8.0-0.9.0-1.4.0